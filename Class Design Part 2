#include
#include
#include
#include
using namespace std;

class InventoryItem
{
private:
   string name;
   int quantity;
   double price;
public:
   InventoryItem();
   InventoryItem(string, int, double);
   string getName();
   int getQuantity();
   double getPrice();
   double getTotalCost();
   void reStock(int);
   void printDetails();
};

InventoryItem.cpp

#include "InventoryItem.h"

InventoryItem::InventoryItem()
{
   this->name = "";
   this->quantity = 0;
   this->price = 0.0;
}
InventoryItem::InventoryItem(string name, int quantity, double price)
{
   this->name = name;
   this->quantity = quantity;
   this->price = price;
}
string InventoryItem::getName() { return name; }
int InventoryItem::getQuantity() { return quantity; }
double InventoryItem::getPrice() { return price; }
double InventoryItem::getTotalCost() { return(getPrice() * getQuantity()); }
void InventoryItem::reStock(int num) { this->quantity += num; }
void InventoryItem::printDetails()
{
   cout << setprecision(2) << fixed << showpoint;
   cout << left << setw(20) << name << left << setw(10) << quantity << left << setw(1) << getTotalCost() << endl;
}

CashRegister.h

#include "InventoryItem.h"

class CashRegister
{
private:
   vector items;
public:
   CashRegister() {}
   void addItem();
   int indexOf(string);
   void checkOut();
};

CashRegister.cpp

#include "CashRegister.h"

int CashRegister::indexOf(string name)
{
   int index = -1;
   for (int i = 0; i < items.size(); i++)
   {
       if (items[i].getName().compare(name) == 0)
       {
           index = i;
           break;
       }
   }
   return index;
}
void CashRegister::addItem()
{
   string item;
   int quantity;
   double price;
   int onHand;
   cin.ignore();
   cout << "Enter the item name: ";
   getline(cin, item, '\n');
   int index = indexOf(item);
   if (index == -1)
   {
       // item not present, good to add
       cout << "Enter the quantity: ";
       cin >> quantity;
       cout << "Enter the price: $";
       cin >> price;
       items.push_back(InventoryItem(item, quantity, price));
       cout << item << " successfully added to the list.\n";
   }
   else
   {
       // item already present, we need to add stock to it
       cout << item << " is already present in the list!\nEnter the quantity to re-stock: ";
       cin >> quantity;
       items[index].reStock(quantity);
       cout << item << " has been re-stocked to " << items[index].getQuantity() << ".\n";
   }
}
void CashRegister::checkOut()
{
   cout << "YOUR CART DETAILS:\n------------------\n";
   for (InventoryItem item : items)
       item.printDetails();
   double subTotal = 0.0;
   for (InventoryItem item : items)
       subTotal += item.getTotalCost();
   double salesTax = (0.06 * subTotal);
   double total = (subTotal + salesTax);
   cout << "\nPurchase sub total: $" << subTotal << endl;
   cout << "Tax: $" << salesTax << endl;
   cout << "Purchase total: $" << total << endl;
}

main.cpp

#include "CashRegister.h"

int main()
{
   CashRegister cashRegister;
   int n;
   cout << "Enter the number of items to be added: ";
   cin >> n;
   for (int i = 0; i < n; i++)
   {
       cashRegister.addItem();
       cout << endl;
   }

   cout << "\nChecking out..\n";
   cashRegister.checkOut();
   return 0;
}  
